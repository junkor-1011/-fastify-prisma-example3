openapi: 3.0.3
info:
  title: Fastify Example
  description: fastify zod example
  version: 0.0.1
components:
  schemas:
    ErrorResponse:
      type: object
      properties:
        schemaOfErrorResponse:
          type: object
          properties:
            statusCode:
              type: number
              minimum: 400
              maximum: 599
              description: http error status code
            error:
              type: string
              minLength: 1
              description: summary of the error
            message:
              type: string
              description: error message for clients
          required:
            - statusCode
            - error
            - message
          additionalProperties: false
          example:
            statusCode: 500
            error: Internal Server Error
            message: something went wrong
        schemaOf4xxErrorResponse:
          type: object
          properties:
            statusCode:
              type: number
              minimum: 400
              maximum: 499
              description: http error status code(client error)
            error:
              $ref: "#/components/schemas/ErrorResponse/properties/schemaOfErrorResponse/prop\
                erties/error"
            message:
              $ref: "#/components/schemas/ErrorResponse/properties/schemaOfErrorResponse/prop\
                erties/message"
          required:
            - statusCode
            - error
            - message
          additionalProperties: false
          example:
            statusCode: 404
            error: Not Found
            message: resource not found
        schemaOf5xxErrorResponse:
          type: object
          properties:
            statusCode:
              type: number
              minimum: 500
              maximum: 599
              description: http error status code(server error)
            error:
              $ref: "#/components/schemas/ErrorResponse/properties/schemaOfErrorResponse/prop\
                erties/error"
            message:
              $ref: "#/components/schemas/ErrorResponse/properties/schemaOfErrorResponse/prop\
                erties/message"
          required:
            - statusCode
            - error
            - message
          additionalProperties: false
          example:
            statusCode: 502
            error: Bad Gateway
            message: Bad Gateway
      required:
        - schemaOfErrorResponse
        - schemaOf4xxErrorResponse
        - schemaOf5xxErrorResponse
      additionalProperties: false
    userSchemas:
      type: object
      properties:
        userInputSchema:
          type: object
          properties:
            name:
              type: string
              description: user name
            email:
              type: string
              format: email
              description: user's email address
            birthdate:
              type: string
              format: date-time
              description: bitrth day of the user
          required:
            - name
            - birthdate
          additionalProperties: false
          example:
            name: test-user
            email: test-user@example.com
            birthdate: 2022-12-01T12:00:00.000Z
        userSchema:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: user id
            name:
              $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/n\
                ame"
            email:
              $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/e\
                mail"
            rank:
              type: number
              minimum: 1
              maximum: 10
              multipleOf: 1
              default: 1
              description: the rank of user
            birthdate:
              $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/b\
                irthdate"
            createdAt:
              type: string
              format: date-time
              description: signup date
            updatedAt:
              type: string
              format: date-time
              description: last modified date
          required:
            - id
            - name
            - birthdate
            - createdAt
            - updatedAt
          additionalProperties: false
          example:
            id: 3fa85f64-5717-4562-b3fc-2c963f66afa6
            name: test-user
            email: test-user@example.com
            rank: 10
            birthdate: 2022-12-01T12:00:00.000Z
            createdAt: 2022-12-01T12:00:00.000Z
            updatedAt: 2022-12-01T12:00:00.000Z
        userListSchema:
          type: array
          items:
            type: object
            properties:
              id:
                $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/id"
              name:
                $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/n\
                  ame"
              email:
                $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/e\
                  mail"
              rank:
                $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/rank"
              birthdate:
                $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/b\
                  irthdate"
              createdAt:
                $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/create\
                  dAt"
              updatedAt:
                $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/update\
                  dAt"
            required:
              - id
              - name
              - birthdate
              - createdAt
              - updatedAt
            additionalProperties: false
        getUsersQuerySchema:
          type: object
          properties:
            limit:
              type: number
              minimum: 1
              multipleOf: 1
              default: 100
              description: limit
            offset:
              type: number
              minimum: 0
              multipleOf: 1
              description: offset
          additionalProperties: false
        getUserParamsSchema:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/id"
          required:
            - id
          additionalProperties: false
        putUserParamsSchema:
          type: object
          properties:
            id:
              type: string
              format: uuid
              description: id of the user
          required:
            - id
          additionalProperties: false
        putUserRequestBodySchema:
          type: object
          properties:
            name:
              $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/n\
                ame"
            email:
              $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/e\
                mail"
            birthdate:
              $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/b\
                irthdate"
            rank:
              $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/rank"
          required:
            - name
            - birthdate
          additionalProperties: false
        patchUserParamsSchema:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/id"
          required:
            - id
          additionalProperties: false
        patchUserRequestBodySchema:
          type: object
          properties:
            name:
              $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/n\
                ame"
            email:
              $ref: "#/components/schemas/userSchemas/properties/userInputSchema/properties/e\
                mail"
            rank:
              $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/rank"
          additionalProperties: false
        deleteUserParamsSchema:
          type: object
          properties:
            id:
              $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/id"
          required:
            - id
          additionalProperties: false
      required:
        - userInputSchema
        - userSchema
        - userListSchema
        - getUsersQuerySchema
        - getUserParamsSchema
        - putUserParamsSchema
        - putUserRequestBodySchema
        - patchUserParamsSchema
        - patchUserRequestBodySchema
        - deleteUserParamsSchema
      additionalProperties: false
paths:
  /users/:
    post:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSchemas/properties/userInputSchema"
      responses:
        "201":
          description: user was created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userSchemas/properties/userSchema"
                description: user was created
        4XX:
          description: Client Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse/properties/schemaOf4xxErrorResponse"
                description: Client Error
        5XX:
          description: Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse/properties/schemaOf5xxErrorResponse"
                description: Server Error
    get:
      tags:
        - User
      parameters:
        - schema:
            type: number
            minimum: 1
            multipleOf: 1
            default: 100
          in: query
          name: limit
          required: false
          description: limit
        - schema:
            type: number
            minimum: 0
            multipleOf: 1
          in: query
          name: offset
          required: false
          description: offset
      responses:
        "200":
          description: users
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userSchemas/properties/userListSchema"
                description: users
  "/users/{id}":
    get:
      tags:
        - User
      parameters:
        - schema:
            $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/id"
          in: path
          name: id
          required: true
      responses:
        "200":
          description: user detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userSchemas/properties/userSchema"
                description: user detail
    delete:
      tags:
        - User
      parameters:
        - schema:
            $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/id"
          in: path
          name: id
          required: true
      responses:
        "204":
          description: deleted user successfully
    patch:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSchemas/properties/patchUserRequestBodySchema"
      parameters:
        - schema:
            $ref: "#/components/schemas/userSchemas/properties/userSchema/properties/id"
          in: path
          name: id
          required: true
      responses:
        "200":
          description: user detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userSchemas/properties/userSchema"
                description: user detail
    put:
      tags:
        - User
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/userSchemas/properties/putUserRequestBodySchema"
      parameters:
        - schema:
            type: string
            format: uuid
          in: path
          name: id
          required: true
          description: id of the user
      responses:
        "200":
          description: user detail
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/userSchemas/properties/userSchema"
                description: user detail
